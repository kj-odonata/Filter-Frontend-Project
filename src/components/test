










<div v-for="(filter, index) in filters" :key="index" class="row align-items-center">
  <!-- Column select -->
  <div class="col">
    <select class="form-control" v-model="filter.column">
      <option value="">Select Column</option>
      <option v-for="column in columns" :value="column" :key="column">{{ column }}</option>
    </select>
  </div>
  <!-- Condition select -->
  <div class="col">
    <select class="form-control" v-model="filter.condition">
      <option value="">Select Condition</option>
      <option v-for="condition in conditions" :value="condition" :key="condition">{{ condition }}</option>
    </select>
  </div>
  <!-- Value input -->
  <div class="col">
    <div class="form-control">
      <input v-model="filter.value" placeholder="Value" />
    </div>
  </div>
  <!-- Add filter button -->
  <div class="col">
    <button class="btn btn-danger" @click="removeFilter(index)">Remove</button>
  </div>
</div>
<button class="btn btn-primary" @click="addFilter">Add Filter</button>



data() {
    return {
      // ... your existing data ...
      filters: [],
    };
  },+
  methods: {
    // ... your existing methods ...
  
    addFilter() {
      this.filters.push({
        column: '',
        condition: '',
        value: '',
      });
    },
    removeFilter(index) {
      this.filters.splice(index, 1);
    },
  
    async fetchData() {
      // ... your existing code ...
  
      try {
        const filterData = this.filters.map(filter => ({
          column: filter.column,
          condition: filter.condition,
          value: filter.value,
        }));
  
        const queryParams = new URLSearchParams({
          filters: JSON.stringify(filterData),
          page: this.currentPage,
        });
  
        const response = await axios.get(`/filter-api/?${queryParams.toString()}`);
  
        // ... rest of your code ...
      } catch (error) {
        console.error('Error fetching data:', error);
      }
      // ...
    },
    // ...
  },
  